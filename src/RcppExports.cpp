// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// eloCPP
NumericVector eloCPP(IntegerMatrix& pwc, NumericVector& scores, int num);
RcppExport SEXP _quickPWCR_eloCPP(SEXP pwcSEXP, SEXP scoresSEXP, SEXP numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix& >::type pwc(pwcSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    rcpp_result_gen = Rcpp::wrap(eloCPP(pwc, scores, num));
    return rcpp_result_gen;
END_RCPP
}
// reservoirSampling
IntegerVector reservoirSampling(IntegerVector& indexs, int k);
RcppExport SEXP _quickPWCR_reservoirSampling(SEXP indexsSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type indexs(indexsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(reservoirSampling(indexs, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_quickPWCR_eloCPP", (DL_FUNC) &_quickPWCR_eloCPP, 3},
    {"_quickPWCR_reservoirSampling", (DL_FUNC) &_quickPWCR_reservoirSampling, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_quickPWCR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
